# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  email: String
  password: PasswordState
  firstName: String
  lastName: String
  userPhotoUrl: String
  isSystemAdmin: Boolean
  isVerified: Boolean
  school: School
  createdAt: DateTime
  updatedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  email: StringFilter
  password: PasswordFilter
  firstName: StringFilter
  lastName: StringFilter
  userPhotoUrl: StringFilter
  isSystemAdmin: BooleanFilter
  isVerified: BooleanFilter
  school: SchoolWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  email: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  userPhotoUrl: OrderDirection
  isSystemAdmin: OrderDirection
  isVerified: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  email: String
  password: String
  firstName: String
  lastName: String
  userPhotoUrl: String
  isSystemAdmin: Boolean
  isVerified: Boolean
  school: SchoolRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input SchoolRelateToOneForUpdateInput {
  create: SchoolCreateInput
  connect: SchoolWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  email: String
  password: String
  firstName: String
  lastName: String
  userPhotoUrl: String
  isSystemAdmin: Boolean
  isVerified: Boolean
  school: SchoolRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input SchoolRelateToOneForCreateInput {
  create: SchoolCreateInput
  connect: SchoolWhereUniqueInput
}

type School {
  id: ID!
  schoolName: String
  schoolPhotoUrl: String
  createdAt: DateTime
  updatedAt: DateTime
}

input SchoolWhereUniqueInput {
  id: ID
}

input SchoolWhereInput {
  AND: [SchoolWhereInput!]
  OR: [SchoolWhereInput!]
  NOT: [SchoolWhereInput!]
  id: IDFilter
  schoolName: StringFilter
  schoolPhotoUrl: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input SchoolOrderByInput {
  id: OrderDirection
  schoolName: OrderDirection
  schoolPhotoUrl: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input SchoolUpdateInput {
  schoolName: String
  schoolPhotoUrl: String
  createdAt: DateTime
  updatedAt: DateTime
}

input SchoolUpdateArgs {
  where: SchoolWhereUniqueInput!
  data: SchoolUpdateInput!
}

input SchoolCreateInput {
  schoolName: String
  schoolPhotoUrl: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Attendance {
  id: ID!
  type: String
  temperature: Float
  capturePhotoUrl: String
  user: School
  school: School
  createdAt: DateTime
  updatedAt: DateTime
}

input AttendanceWhereUniqueInput {
  id: ID
}

input AttendanceWhereInput {
  AND: [AttendanceWhereInput!]
  OR: [AttendanceWhereInput!]
  NOT: [AttendanceWhereInput!]
  id: IDFilter
  type: StringNullableFilter
  temperature: FloatNullableFilter
  capturePhotoUrl: StringFilter
  user: SchoolWhereInput
  school: SchoolWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input AttendanceOrderByInput {
  id: OrderDirection
  type: OrderDirection
  temperature: OrderDirection
  capturePhotoUrl: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input AttendanceUpdateInput {
  type: String
  temperature: Float
  capturePhotoUrl: String
  user: SchoolRelateToOneForUpdateInput
  school: SchoolRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input AttendanceUpdateArgs {
  where: AttendanceWhereUniqueInput!
  data: AttendanceUpdateInput!
}

input AttendanceCreateInput {
  type: String
  temperature: Float
  capturePhotoUrl: String
  user: SchoolRelateToOneForCreateInput
  school: SchoolRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createSchool(data: SchoolCreateInput!): School
  createSchools(data: [SchoolCreateInput!]!): [School]
  updateSchool(where: SchoolWhereUniqueInput!, data: SchoolUpdateInput!): School
  updateSchools(data: [SchoolUpdateArgs!]!): [School]
  deleteSchool(where: SchoolWhereUniqueInput!): School
  deleteSchools(where: [SchoolWhereUniqueInput!]!): [School]
  createAttendance(data: AttendanceCreateInput!): Attendance
  createAttendances(data: [AttendanceCreateInput!]!): [Attendance]
  updateAttendance(where: AttendanceWhereUniqueInput!, data: AttendanceUpdateInput!): Attendance
  updateAttendances(data: [AttendanceUpdateArgs!]!): [Attendance]
  deleteAttendance(where: AttendanceWhereUniqueInput!): Attendance
  deleteAttendances(where: [AttendanceWhereUniqueInput!]!): [Attendance]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  email: String
  password: String
  firstName: String
  lastName: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  schools(where: SchoolWhereInput! = {}, orderBy: [SchoolOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SchoolWhereUniqueInput): [School!]
  school(where: SchoolWhereUniqueInput!): School
  schoolsCount(where: SchoolWhereInput! = {}): Int
  attendances(where: AttendanceWhereInput! = {}, orderBy: [AttendanceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AttendanceWhereUniqueInput): [Attendance!]
  attendance(where: AttendanceWhereUniqueInput!): Attendance
  attendancesCount(where: AttendanceWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
